name: Prepare Draft Release

on:
  workflow_run:
    workflows: [ "Development Deploy", "Main Workflow" ]
    types:
      - completed

jobs:
  create-draft:
    name: Create draft
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Delete drafts
        uses: hugo19941994/delete-draft-releases@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtain new tag
        run: |
          CURRENT=$(git tag --sort=-version:refname | head -n1)
          NEW=$(echo ${CURRENT} | awk -F. '{print $1"."$2"."$3+1}')
          echo "RELEASE_TAG=${NEW#}" >> $GITHUB_ENV

          echo current $CURRENT
          echo new $NEW

      - name: Check if auto-deploy flag enabled
        uses: actions/github-script@v7
        id: get-workflow-data
        with:
          script: |
            const workflow = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });

            // get auto_deploy flag from the triggering workflow's outputs
            let autoDeploy = false;
            if (workflow.data.jobs) {
              const installJob = workflow.data.jobs.find(j => j.id === "install");
              if (installJob && installJob.outputs && installJob.outputs.auto_deploy) {
                autoDeploy = installJob.outputs.auto_deploy === "true";
              }
            }

            core.setOutput("auto_deploy", autoDeploy);

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              let release = await github.rest.repos.createRelease({
                draft: ${{ !steps.get-workflow-data.outputs.auto_deploy }},
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                target_commitish: "master",
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
